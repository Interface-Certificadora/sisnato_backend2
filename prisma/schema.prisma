generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Solicitacao {
  id                Int             @id @unique @default(autoincrement())
  nome              String          @db.VarChar(255)
  email             String          @db.VarChar(100)
  cpf               String          @db.VarChar(14)
  telefone          String?         @db.VarChar(15)
  telefone2         String?         @db.VarChar(15)
  dt_nascimento     DateTime?
  id_fcw            Int?
  cnh               String?         @db.VarChar(20)
  ativo             Boolean         @default(true)
  rela_quest        Boolean         @default(false)
  distrato          Boolean         @default(false)
  dt_distrato       DateTime?
  status_aprovacao  Boolean?        @default(false)
  distrato_id       Int?
  andamento         String?         @db.VarChar(100)
  type_validacao    String?         @db.VarChar(50)
  dt_aprovacao      DateTime?       @db.Date
  hr_aprovacao      DateTime?       @db.Time(6)
  dt_agendamento    DateTime?       @db.Date
  hr_agendamento    DateTime?       @db.Time(6)
  estatos_pgto      String?         @db.VarChar(50)
  valorcd           Float?
  situacao_pg       Int?            @default(0)
  freqSms           Int?            @default(0)
  alertanow         Boolean?        @default(false)
  dt_criacao_now    DateTime?
  statusAtendimento Boolean         @default(false)
  pause             Boolean?        @default(false)
  corretorId        Int?
  construtoraId     Int?
  financeiroId      Int?
  empreendimentoId  Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?       @updatedAt
  relacionamentos   Json[]
  dt_revogacao      DateTime?
  direto            Boolean         @default(false)
  txid              String?         @db.VarChar(300)
  pixCopiaECola     String?
  imagemQrcode      String?
  uploadCnh         Json?
  uploadRg          Json?
  obs               Json[]
  alerts            Alert[]
  construtora       Construtora?    @relation("ConstrutoraSolicitacoes", fields: [construtoraId], references: [id])
  corretor          User?           @relation("CorretorSolicitacoes", fields: [corretorId], references: [id])
  empreendimento    Empreendimento? @relation("EmpreendimentoSolicitacoes", fields: [empreendimentoId], references: [id])
  financeiro        Financeiro?     @relation("FinanceiraSolicitacoes", fields: [financeiroId], references: [id])
  tags              Tag[]

  @@index([email], map: "idx_solicitacao_email")
}

model User {
  id                        Int                  @id @unique @default(autoincrement())
  username                  String               @unique @db.VarChar(50)
  password                  String               @db.VarChar(255)
  password_key              String               @db.VarChar(100)
  telefone                  String?              @db.VarChar(15)
  email                     String?              @unique @db.VarChar(100)
  cpf                       String?              @db.VarChar(14)
  nome                      String?              @db.VarChar(255)
  cargo                     String?              @db.VarChar(100)
  hierarquia                String?              @db.VarChar(100)
  reset_password            Boolean?             @default(true)
  status                    Boolean?             @default(false)
  sms_relat                 Boolean?             @default(false)
  termos                    Boolean?             @default(false)
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime?            @updatedAt
  role                      Json?
  Alert                     Alert[]
  responsavelConstrutora    Construtora[]        @relation("ConstrutoraResponsavel")
  responsavelEmpreendimento Empreendimento[]     @relation("EmpreendimentoResponsavel")
  responsavelFinanceiro     Financeiro[]         @relation("FinanceiraResponsavel")
  solicitacoes              Solicitacao[]        @relation("CorretorSolicitacoes")
  construtoras              UserConstrutora[]
  empreendimentos           UserEmpreendimento[]
  financeiros               UserFinanceiro[]

  @@index([username], map: "idx_user_username")
  @@index([email], map: "idx_user_email")
  @@index([cpf], map: "idx_user_cpf")
}

model Construtora {
  id                   Int                     @id @unique @default(autoincrement())
  cnpj                 String                  @unique @db.VarChar(18)
  razaosocial          String                  @db.VarChar(255)
  fantasia             String?                 @db.VarChar(255)
  tel                  String?                 @db.VarChar(15)
  email                String?                 @db.VarChar(100)
  obs                  String?
  status               Boolean                 @default(true)
  valor_cert           Float?                  @default(0)
  responsavelId        Int?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime?               @updatedAt
  atividade            String?                 @db.VarChar(100)
  responsavel          User?                   @relation("ConstrutoraResponsavel", fields: [responsavelId], references: [id])
  empreendimentos      Empreendimento[]
  financeiros          FinanceiroConstrutora[]
  solicitacoes         Solicitacao[]           @relation("ConstrutoraSolicitacoes")
  colaboradores        UserConstrutora[]
  relatorio_financeiro relatorio_financeiro[]

  @@index([cnpj], map: "idx_construtora_cnpj")
  @@index([razaosocial], map: "idx_construtora_razaosocial")
}

model Financeiro {
  id             Int                        @id @unique @default(autoincrement())
  cnpj           String                     @unique @db.VarChar(18)
  razaosocial    String                     @db.VarChar(255)
  fantasia       String?                    @db.VarChar(255)
  tel            String?
  email          String?                    @db.VarChar(100)
  obs            String?
  responsavelId  Int?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime?                  @updatedAt
  responsavel    User?                      @relation("FinanceiraResponsavel", fields: [responsavelId], references: [id])
  construtoras   FinanceiroConstrutora[]
  empreendimento FinanceiroEmpreendimento[]
  solicitacoes   Solicitacao[]              @relation("FinanceiraSolicitacoes")
  colaboradores  UserFinanceiro[]

  @@index([cnpj], map: "idx_financeiro_cnpj")
  @@index([razaosocial], map: "idx_financeiro_razaosocial")
}

model Empreendimento {
  id                   Int                        @id @unique @default(autoincrement())
  nome                 String                     @db.VarChar(255)
  endereco             String?                    @db.VarChar(255)
  cidade               String?                    @db.VarChar(100)
  estado               String?                    @db.VarChar(2)
  cep                  String?                    @db.VarChar(10)
  obs                  String?
  status               Boolean                    @default(true)
  tag                  String?                    @db.VarChar(50)
  construtoraId        Int?
  responsavelId        Int?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime?                  @updatedAt
  construtora          Construtora?               @relation(fields: [construtoraId], references: [id])
  responsavel          User?                      @relation("EmpreendimentoResponsavel", fields: [responsavelId], references: [id])
  financeiros          FinanceiroEmpreendimento[]
  Solicitacao          Solicitacao[]              @relation("EmpreendimentoSolicitacoes")
  colaboradores        UserEmpreendimento[]
  relatorio_financeiro relatorio_financeiro[]

  @@index([nome], map: "idx_empreendimento_nome")
  @@index([cidade, estado], map: "idx_empreendimento_localizacao")
}

model Alert {
  id             Int          @id @unique @default(autoincrement())
  solicitacao_id Int?
  status         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt
  descricao      String
  corretor_id    Int?
  corretor       User?        @relation(fields: [corretor_id], references: [id], onUpdate: SetNull)
  solicitacao    Solicitacao? @relation(fields: [solicitacao_id], references: [id], onUpdate: SetNull)
}

model Suporte {
  id          Int       @id @unique @default(autoincrement())
  tag         String
  descricao   String?
  solicitacao Int?
  imgSuspensa String?
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  urlveiw     Json[]
}

model Tag {
  id              Int          @id @default(autoincrement())
  solicitacao     Int?
  descricao       String?
  createAt        DateTime     @default(now())
  solicitacaoData Solicitacao? @relation(fields: [solicitacao], references: [id], onDelete: NoAction, onUpdate: SetNull)
}

model Chamado {
  id            Int       @id @unique @default(autoincrement())
  descricao     String
  status        String
  idUser        Int
  createAt      DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  solicitacaoId Int
  images        Json[]
  chat          Json[]
  temp          Json[]
  departamento  String?   @default("vendas")
  dth_qru       DateTime  @default(now())
  prioridade    String?   @default("baixa")
  titulo        String
}

model relatorio_financeiro {
  id               Int             @id @unique @default(autoincrement())
  protocolo        String          @unique
  situacao_pg      Int             @default(0)
  nota_fiscal      String?         @db.VarChar(255)
  start            DateTime?       @db.Date
  end              DateTime?       @db.Date
  statusNota       Boolean?        @default(false)
  createAt         DateTime        @default(now())
  updatedAt        DateTime?       @updatedAt
  construtoraId    Int?
  total_cert       Int?
  valorTotal       Float?
  solicitacao      Json[]          @default([])
  pdf              String?         @db.VarChar(255)
  xlsx             String?         @db.VarChar(255)
  modelo           String?
  empreendimentoId Int?
  dt_pg            DateTime?
  status           Boolean         @default(true)
  construtora      Construtora?    @relation(fields: [construtoraId], references: [id], onDelete: NoAction, onUpdate: SetNull)
  Empreendimento   Empreendimento? @relation(fields: [empreendimentoId], references: [id], onDelete: NoAction, onUpdate: SetNull)
}

model UserEmpreendimento {
  userId           Int
  empreendimentoId Int
  empreendimento   Empreendimento @relation(fields: [empreendimentoId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, empreendimentoId])
}

model UserConstrutora {
  userId        Int
  construtoraId Int
  construtora   Construtora @relation(fields: [construtoraId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, construtoraId])
}

model UserFinanceiro {
  userId       Int
  financeiroId Int
  financeiro   Financeiro @relation(fields: [financeiroId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, financeiroId])
}

model FinanceiroEmpreendimento {
  financeiroId     Int
  empreendimentoId Int
  empreendimento   Empreendimento @relation(fields: [empreendimentoId], references: [id], onDelete: Cascade)
  financeiro       Financeiro     @relation(fields: [financeiroId], references: [id], onDelete: Cascade)

  @@id([empreendimentoId, financeiroId])
}

model FinanceiroConstrutora {
  financeiroId  Int
  construtoraId Int
  construtora   Construtora @relation(fields: [construtoraId], references: [id])
  financeiro    Financeiro  @relation(fields: [financeiroId], references: [id])

  @@id([construtoraId, financeiroId])
}

model Logs {
  id        Int       @id @unique @default(autoincrement())
  User      Int
  EffectId  Int
  descricao String
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  rota      String
}

model Termo {
  id        Int       @id @unique @default(autoincrement())
  termo     String
  politica  String
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Bug {
  id        Int       @id @unique @default(autoincrement())
  descricao String
  status    Boolean   @default(true)
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SystemMessage {
  id        Int       @id @unique @default(autoincrement())
  tipo      String
  message   String
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
