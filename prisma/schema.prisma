generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Solicitacao {

  id              Int                         @id @default(autoincrement())
  nome            String                      @db.VarChar(255) // Limite de tamanho para o nome
  email           String                      @db.VarChar(100) // Validação de email
  cpf             String                      @unique @db.VarChar(14) // Formato padrão de CPF
  telefone        String?                     @db.VarChar(15) // Formato de telefone
  telefone2       String?                     @db.VarChar(15) // Segundo telefone
  dt_nascimento   DateTime?
  id_fcw          Int?
  obs             String?                     @db.Text // Texto longo para observações
  cnh             String?                     @db.VarChar(20) // Formato de CNH
  ativo           Boolean                     @default(true)
  uploadCnh       String?                     @db.VarChar(255) // Caminho do upload
  uploadRg        String?                     @db.VarChar(255) // Caminho do upload
  // Relacionamento de solicitações vinculadas por CPF
  relacionamentos SolicitacaoRelacionamento[]

  rela_quest        Boolean   @default(false)
  distrato          Boolean   @default(false)
  dt_distrato       DateTime?
  log               String[]
  status_aprovacao  Boolean?  @default(false)
  distrato_id       Int?
  andamento         String?   @db.VarChar(100) // Padronização de nome
  type_validacao    String?   @db.VarChar(50) // Limite de tamanho
  dt_aprovacao      DateTime?
  hr_aprovacao      DateTime?
  dt_agendamento    DateTime?
  hr_agendamento    DateTime?
  estatos_pgto      String?   @db.VarChar(50) // Correção de digitação
  valorcd           Decimal?  @db.Decimal(10, 2) // Precisão decimal
  situacao_pg       Int?      @default(0)
  freqSms           Int?      @default(0)
  alertanow         Boolean?  @default(false)
  dt_criacao_now    DateTime?
  statusAtendimento Boolean   @default(false)
  pause             Boolean?  @default(false)

  // Relacionamentos
  corretor      User?        @relation("CorretorSolicitacoes", fields: [corretorId], references: [id], onDelete: SetNull)
  corretorId    Int?
  construtora   Construtora? @relation("ConstrutoraSolicitacoes", fields: [construtoraId], references: [id], onDelete: SetNull)
  construtoraId Int?

  financeiro       Financeiro?     @relation("FinanceiraSolicitacoes", fields: [financeiroId], references: [id], onDelete: SetNull)
  financeiroId     Int?
  empreendimento   Empreendimento? @relation("EmpreendimentoSolicitacoes", fields: [empreendimentoId], references: [id], onDelete: SetNull)
  empreendimentoId Int?

  // Relacionamentos adicionais
  alerts   Alert[]
  tags     Tag[]
  chamados Chamado[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cpf], name: "idx_solicitacao_cpf")
  @@index([email], name: "idx_solicitacao_email")
}

model User {
  id              Int                  @id @default(autoincrement())
  username        String               @unique @db.VarChar(50)
  password        String               @db.VarChar(255) // Para hash seguro
  password_key    String               @db.VarChar(100)
  telefone        String?              @db.VarChar(15)
  email           String?              @unique @db.VarChar(100)
  cpf             String?              @db.VarChar(14)
  nome            String?              @db.VarChar(255)
  // Relacionamento muitos-para-muitos correto
  empreendimentos UserEmpreendimento[]
  construtoras    UserConstrutora[]
  financeiros     UserFinanceiro[]

  // Relacionamentos de papéis
  solicitacoes Solicitacao[] @relation("CorretorSolicitacoes")
  alerts       Alert[]
  chamados     Chamado[]

  // Papéis de responsabilidade
  responsavelConstrutora    Construtora[]    @relation("ConstrutoraResponsavel")
  responsavelEmpreendimento Empreendimento[] @relation("EmpreendimentoResponsavel")
  responsavelFinanceiro     Financeiro[]     @relation("FinanceiraResponsavel")

  cargo          String?  @db.VarChar(100)
  hierarquia     String?  @db.VarChar(100)
  reset_password Boolean? @default(true)
  status         Boolean? @default(false)
  sms_relat      Boolean? @default(false)
  termos         Boolean? @default(false)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  createdBy Financeiro[]

  @@index([username], name: "idx_user_username")
  @@index([email], name: "idx_user_email")
  @@index([cpf], name: "idx_user_cpf")

}

model Construtora {
  id              Int               @id @default(autoincrement())
  cnpj            String            @unique @db.VarChar(18)
  razaosocial     String            @db.VarChar(255)
  fantasia        String?           @db.VarChar(255)
  tel             String?           @db.VarChar(15)
  email           String?           @db.VarChar(100)
  tipo            String?           @db.VarChar(50)
  atividade       String?           @db.VarChar(100)
  obs             String?
  status          Boolean           @default(true)
  valor_cert      Decimal?          @db.Decimal(10, 2)
  financeiroId    Int?
  responsavelId   Int?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  financeiro      Financeiro?       @relation(fields: [financeiroId], references: [id])
  responsavel     User?             @relation("ConstrutoraResponsavel", fields: [responsavelId], references: [id])
  empreendimentos Empreendimento[]
  solicitacoes    Solicitacao[]     @relation("ConstrutoraSolicitacoes")
  colaboradores   UserConstrutora[]

  @@index([cnpj], map: "idx_construtora_cnpj")
  @@index([razaosocial], map: "idx_construtora_razaosocial")
}

model Financeiro {
  id               Int              @id @default(autoincrement())
  cnpj             String           @unique @db.VarChar(18)
  razaosocial      String           @db.VarChar(255)
  fantasia         String?          @db.VarChar(255)
  tel              String?          @db.VarChar(15)
  email            String?          @db.VarChar(100)
  tipo             String?          @db.VarChar(50)
  obs              String?
  title            String           @db.VarChar(255)
  content          String
  autorId          Int?
  responsavelId    Int?
  empreendimentoId Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  construtoras     Construtora[]
  autor            User?            @relation(fields: [autorId], references: [id])
  empreendimento   Empreendimento?  @relation(fields: [empreendimentoId], references: [id])
  responsavel      User?            @relation("FinanceiraResponsavel", fields: [responsavelId], references: [id])
  solicitacoes     Solicitacao[]    @relation("FinanceiraSolicitacoes")
  colaboradores    UserFinanceiro[]

  @@index([cnpj], map: "idx_financeiro_cnpj")
  @@index([razaosocial], map: "idx_financeiro_razaosocial")
}

model Empreendimento {
  id            Int                  @id @default(autoincrement())
  nome          String               @db.VarChar(255)
  descricao     String?
  endereco      String?              @db.VarChar(255)
  cidade        String?              @db.VarChar(100)
  estado        String?              @db.VarChar(2)
  cep           String?              @db.VarChar(10)
  telefone      String?              @db.VarChar(15)
  email         String?              @db.VarChar(100)
  tipo          String?              @db.VarChar(50)
  obs           String?
  dt_inicio     DateTime?
  dt_fim        DateTime?
  status        Boolean              @default(true)
  valor_cert    Decimal?             @db.Decimal(10, 2)
  chave         String?              @db.VarChar(50)
  tag           String?              @db.VarChar(50)
  construtoraId Int?
  responsavelId Int?
  vendedores String? @db.VarChar(255)

  // Relacionamentos reversos

  alerts        Alert[]
  construtora   Construtora?         @relation(fields: [construtoraId], references: [id])
  responsavel   User?                @relation("EmpreendimentoResponsavel", fields: [responsavelId], references: [id])
  financeiros   Financeiro[]
  Solicitacao   Solicitacao[]        @relation("EmpreendimentoSolicitacoes")
  colaboradores UserEmpreendimento[]
  solicitacoes  Solicitacao[]        @relation("EmpreendimentoToSolicitacao")

createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  @@index([nome], map: "idx_empreendimento_nome")
  @@index([cidade, estado], map: "idx_empreendimento_localizacao")
}

model Alert {
  id                 Int             @id @default(autoincrement())
  titulo             String?
  texto              String?
  solicitacao_id     Int?
  corretor           Int?
  tipo               String?
  tag                String?
  empreendimento     Int?
  status             Boolean?        @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime?       @updatedAt
  corretorData       User?           @relation(fields: [corretor], references: [id], onUpdate: SetNull)
  empreendimentoData Empreendimento? @relation(fields: [empreendimento], references: [id], onDelete: NoAction, onUpdate: SetNull)
  solicitacao        Solicitacao?    @relation(fields: [solicitacao_id], references: [id], onUpdate: SetNull)
}

model Suporte {
  id          Int       @id @default(autoincrement())
  tag         String
  descricao   String?
  solicitacao Int?
  urlSuporte  String?
  imgSuspensa String?
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tag {
  id              Int          @id @default(autoincrement())
  solicitacao     Int?
  descricao       String?
  createAt        DateTime     @default(now())
  solicitacaoData Solicitacao? @relation(fields: [solicitacao], references: [id], onDelete: NoAction, onUpdate: SetNull)
}

model Chamado {
  id          Int           @id @default(autoincrement())
  solicitacao Int?
  descricao   String?
  status      Int?
  images      String?
  images_adm  String?
  idUser      Int?
  idResposta  Int?
  resposta    String?
  createAt    DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  User        User?         @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: SetNull)
  Solicitacao Solicitacao[] @relation("ChamadoToSolicitacao")
}

model relatorio_financeiro {
  id          Int       @id @default(autoincrement())
  protocolo   String?   @unique
  situacao_pg Int       @default(0)
  nota_fiscal String?
  solicitacao String
  construtora Int?
  start       DateTime?
  end         DateTime?
  statusNota  Boolean?  @default(false)
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model UserEmpreendimento {
  userId           Int
  empreendimentoId Int
  empreendimento   Empreendimento @relation(fields: [empreendimentoId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, empreendimentoId])
}

model UserConstrutora {
  userId        Int
  construtoraId Int
  construtora   Construtora @relation(fields: [construtoraId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, construtoraId])
}

model UserFinanceiro {
  userId       Int
  financeiroId Int
  financeiro   Financeiro @relation(fields: [financeiroId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, financeiroId])
}

model SolicitacaoRelacionamento {
  solicitacaoId  Int
  relacionadaCpf String // O CPF que será usado para vincular

  solicitacao Solicitacao @relation(fields: [relacionadaCpf], references: [cpf], onDelete: Cascade)

  @@id([solicitacaoId, relacionadaCpf]) // Chave composta para evitar duplicações
}

model Logs {
  id          Int       @id @default(autoincrement())
  User        Int
  EffectId    Int
  EffectTable String
  descricao   String
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

}
