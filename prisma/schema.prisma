// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Solicitacao {
  id                Int          @id @default(autoincrement())
  nome              String       @db.VarChar(255) // Limite de tamanho para o nome
  email             String       @db.VarChar(100) // Validação de email
  cpf               String       @unique @db.VarChar(14) // Formato padrão de CPF
  telefone          String?      @db.VarChar(15) // Formato de telefone
  telefone2         String?      @db.VarChar(15) // Segundo telefone
  dt_nascimento     DateTime?
  id_fcw            Int?
  obs               String?      @db.Text // Texto longo para observações
  cnh               String?      @db.VarChar(20) // Formato de CNH
  ativo             Boolean      @default(true)
  uploadCnh         String?      @db.VarChar(255) // Caminho do upload
  uploadRg          String?      @db.VarChar(255) // Caminho do upload
// Relacionamento de solicitações vinculadas por CPF
  relacionamentos   SolicitacaoRelacionamento[] 

  rela_quest        Boolean      @default(false)
  distrato          Boolean      @default(false)
  dt_distrato       DateTime?
  log               String[]
  status_aprovacao  Boolean?     @default(false)
  distrato_id       Int?
  andamento         String?      @db.VarChar(100) // Padronização de nome
  type_validacao    String?      @db.VarChar(50) // Limite de tamanho
  dt_aprovacao      DateTime?
  hr_aprovacao      DateTime?
  dt_agendamento    DateTime?
  hr_agendamento    DateTime?
  estatos_pgto      String?      @db.VarChar(50) // Correção de digitação
  valorcd           Decimal?     @db.Decimal(10, 2) // Precisão decimal
  situacao_pg       Int?         @default(0)
  freqSms           Int?         @default(0)
  alertanow         Boolean?     @default(false)
  dt_criacao_now    DateTime?
  statusAtendimento Boolean      @default(false)
  pause             Boolean?     @default(false)

  // Relacionamentos
  corretor      User?        @relation("CorretorSolicitacoes", fields: [corretorId], references: [id], onDelete: SetNull)
  corretorId    Int?
  construtora   Construtora? @relation("ConstrutoraSolicitacoes", fields: [construtoraId], references: [id], onDelete: SetNull)
  construtoraId Int?

  financeiro       Financeiro?     @relation("FinanceiraSolicitacoes", fields: [financeiroId], references: [id], onDelete: SetNull)
  financeiroId     Int?
  empreendimento   Empreendimento? @relation("EmpreendimentoSolicitacoes", fields: [empreendimentoId], references: [id], onDelete: SetNull)
  empreendimentoId Int?

  // Relacionamentos adicionais
  alerts   Alert[]
  tags     Tag[]
  chamados Chamado[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([cpf], name: "idx_solicitacao_cpf")
  @@index([email], name: "idx_solicitacao_email")
}

model User {
  id              Int                  @id @default(autoincrement())
  username        String               @unique @db.VarChar(50)
  password        String               @db.VarChar(255) // Para hash seguro
  password_key    String               @db.VarChar(100)
  telefone        String?              @db.VarChar(15)
  email           String?              @unique @db.VarChar(100)
  cpf             String?              @db.VarChar(14)
  nome            String?              @db.VarChar(255)
  // Relacionamento muitos-para-muitos correto
  empreendimentos UserEmpreendimento[]
  construtoras    UserConstrutora[]
  financeiros     UserFinanceiro[]

  // Relacionamentos de papéis
  solicitacoes Solicitacao[] @relation("CorretorSolicitacoes")
  alerts       Alert[]
  chamados     Chamado[]

  // Papéis de responsabilidade
  responsavelConstrutora    Construtora[]    @relation("ConstrutoraResponsavel")
  responsavelEmpreendimento Empreendimento[] @relation("EmpreendimentoResponsavel")
  responsavelFinanceiro     Financeiro[]     @relation("FinanceiraResponsavel")

  cargo          String?  @db.VarChar(100)
  hierarquia     String?  @db.VarChar(100)
  reset_password Boolean? @default(true)
  status         Boolean? @default(false)
  sms_relat      Boolean? @default(false)
  termos         Boolean? @default(false)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  createdBy Financeiro[]

  @@index([username], name: "idx_user_username")
  @@index([email], name: "idx_user_email")
  @@index([cpf], name: "idx_user_cpf")
}

model Construtora {
  id          Int     @id @default(autoincrement())
  cnpj        String  @unique @db.VarChar(18)
  razaosocial String  @db.VarChar(255)
  fantasia    String? @db.VarChar(255)
  tel         String? @db.VarChar(15)
  email       String? @db.VarChar(100)

  tipo      String? @db.VarChar(50)
  atividade String? @db.VarChar(100)
  obs       String? @db.Text

  status     Boolean  @default(true)
  valor_cert Decimal? @db.Decimal(10, 2)

  // Relacionamentos
  financeiro   Financeiro? @relation(fields: [financeiroId], references: [id], onDelete: SetNull)
  financeiroId Int?

  responsavel   User? @relation("ConstrutoraResponsavel", fields: [responsavelId], references: [id], onDelete: SetNull)
  responsavelId Int?

  colaboradores   UserConstrutora[]
  solicitacoes    Solicitacao[]     @relation("ConstrutoraSolicitacoes")
  empreendimentos Empreendimento[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cnpj], name: "idx_construtora_cnpj")
  @@index([razaosocial], name: "idx_construtora_razaosocial")
}

model Financeiro {
  id          Int     @id @default(autoincrement())
  cnpj        String  @unique @db.VarChar(18)
  razaosocial String  @db.VarChar(255)
  fantasia    String? @db.VarChar(255)

  // Contato
  tel   String? @db.VarChar(15)
  email String? @db.VarChar(100)

  // Detalhes adicionais
  tipo String? @db.VarChar(50)
  obs  String? @db.Text

  // Conteúdo e autoria
  title   String @db.VarChar(255)
  content String @db.Text

  // Relacionamentos
  autor   User? @relation(fields: [autorId], references: [id], onDelete: SetNull)
  autorId Int?

  responsavel   User? @relation("FinanceiraResponsavel", fields: [responsavelId], references: [id], onDelete: SetNull)
  responsavelId Int?

  // Relacionamentos reversos
  colaboradores UserFinanceiro[]
  solicitacoes  Solicitacao[]    @relation("FinanceiraSolicitacoes")
  construtoras  Construtora[]

  empreendimento   Empreendimento? @relation(fields: [empreendimentoId], references: [id], onDelete: SetNull)
  empreendimentoId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([cnpj], name: "idx_financeiro_cnpj")
  @@index([razaosocial], name: "idx_financeiro_razaosocial")
}

model Empreendimento {
  id        Int     @id @default(autoincrement())
  nome      String  @db.VarChar(255)
  descricao String? @db.Text

  // Detalhes de localização
  endereco String? @db.VarChar(255)
  cidade   String? @db.VarChar(100)
  estado   String? @db.VarChar(2)
  cep      String? @db.VarChar(10)

  // Contato
  telefone String? @db.VarChar(15)
  email    String? @db.VarChar(100)

  // Detalhes adicionais
  tipo String? @db.VarChar(50)
  obs  String? @db.Text

  // Datas do projeto
  dt_inicio DateTime?
  dt_fim    DateTime?

  // Status e identificação
  status     Boolean  @default(true)
  valor_cert Decimal? @db.Decimal(10, 2)
  chave      String?  @db.VarChar(50)
  tag        String?  @db.VarChar(50)

  // Relacionamentos
  construtora   Construtora? @relation(fields: [construtoraId], references: [id], onDelete: SetNull)
  construtoraId Int?

  financeiros Financeiro[]

  responsavel   User? @relation("EmpreendimentoResponsavel", fields: [responsavelId], references: [id], onDelete: SetNull)
  responsavelId Int?

  vendedores String? @db.VarChar(255)

  // Relacionamentos reversos
  alerts        Alert[]
  colaboradores UserEmpreendimento[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Solicitacao Solicitacao[] @relation("EmpreendimentoSolicitacoes")

  @@index([nome], name: "idx_empreendimento_nome")
  @@index([cidade, estado], name: "idx_empreendimento_localizacao")
}

model Alert {
  id                 Int             @id @default(autoincrement())
  titulo             String?
  texto              String?
  solicitacao_id     Int?
  solicitacao        Solicitacao?    @relation(fields: [solicitacao_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
  corretor           Int?
  corretorData       User?           @relation(fields: [corretor], references: [id], onDelete: SetNull, onUpdate: SetNull)
  tipo               String?
  tag                String?
  empreendimento     Int?
  empreendimentoData Empreendimento? @relation(fields: [empreendimento], references: [id], onDelete: NoAction, onUpdate: SetNull)
  status             Boolean?        @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime?       @updatedAt
}

model Suporte {
  id          Int       @id @default(autoincrement())
  tag         String
  descricao   String?
  solicitacao Int?
  urlSuporte  String?
  imgSuspensa String?
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tag {
  id              Int          @id @default(autoincrement())
  solicitacao     Int?
  solicitacaoData Solicitacao? @relation(fields: [solicitacao], references: [id], onDelete: NoAction, onUpdate: SetNull)
  descricao       String?
  createAt        DateTime     @default(now())
}

model Chamado {
  id          Int       @id @default(autoincrement())
  solicitacao Int?
  descricao   String?
  status      Int?
  images      String?
  images_adm  String?
  idUser      Int?
  User        User?     @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: SetNull)
  idResposta  Int?
  resposta    String?
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  Solicitacao Solicitacao[]
}

model relatorio_financeiro {
  id          Int       @id @default(autoincrement())
  protocolo   String?   @unique()
  situacao_pg Int       @default(0)
  nota_fiscal String?
  solicitacao String
  construtora Int?
  start       DateTime?
  end         DateTime?
  statusNota  Boolean?  @default(false)
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

// Tabelas intermediárias para muitos-para-muitos
model UserEmpreendimento {
  userId           Int
  empreendimentoId Int
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  empreendimento   Empreendimento @relation(fields: [empreendimentoId], references: [id], onDelete: Cascade)

  @@id([userId, empreendimentoId])
}

model UserConstrutora {
  userId        Int
  construtoraId Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  construtora   Construtora @relation(fields: [construtoraId], references: [id], onDelete: Cascade)

  @@id([userId, construtoraId])
}

model UserFinanceiro {
  userId       Int
  financeiroId Int
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  financeiro   Financeiro @relation(fields: [financeiroId], references: [id], onDelete: Cascade)

  @@id([userId, financeiroId])
}

model SolicitacaoRelacionamento {
  solicitacaoId      Int
  relacionadaCpf     String  // O CPF que será usado para vincular

  solicitacao        Solicitacao @relation(fields: [solicitacaoId], references: [id], onDelete: Cascade)
  
  @@id([solicitacaoId, relacionadaCpf])  // Chave composta para evitar duplicações
}

model Logs {
  id          Int       @id @default(autoincrement())
  User        Int
  EffectId    Int
  EffectTable  String
  descricao   String
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}