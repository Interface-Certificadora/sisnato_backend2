generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Solicitacao {
  id                Int                         @id @unique @default(autoincrement())
  nome              String                      @db.VarChar(255)
  email             String                      @db.VarChar(100)
  cpf               String                      @db.VarChar(14)
  telefone          String?                     @db.VarChar(15)
  telefone2         String?                     @db.VarChar(15)
  dt_nascimento     DateTime?
  id_fcw            Int?
  obs               String?
  cnh               String?                     @db.VarChar(20)
  ativo             Boolean                     @default(true)
  uploadCnh         String?                     @db.VarChar(255)
  uploadRg          String?                     @db.VarChar(255)
  rela_quest        Boolean                     @default(false)
  distrato          Boolean                     @default(false)
  dt_distrato       DateTime?
  status_aprovacao  Boolean?                    @default(false)
  distrato_id       Int?
  andamento         String?                     @db.VarChar(100)
  type_validacao    String?                     @db.VarChar(50)
  dt_aprovacao      DateTime?
  hr_aprovacao      DateTime?
  dt_agendamento    DateTime?
  hr_agendamento    DateTime?
  estatos_pgto      String?                     @db.VarChar(50)
  valorcd           Decimal?                    @db.Decimal(10, 2)
  situacao_pg       Int?                        @default(0)
  freqSms           Int?                        @default(0)
  alertanow         Boolean?                    @default(false)
  dt_criacao_now    DateTime?
  statusAtendimento Boolean                     @default(false)
  pause             Boolean?                    @default(false)
  corretorId        Int?
  construtoraId     Int?
  financeiroId      Int?
  empreendimentoId  Int?
  createdAt         DateTime                    @default(now())
  updatedAt         DateTime?                   @updatedAt
  alerts            Alert[]
  Logs              Logs[]
  construtora       Construtora?                @relation("ConstrutoraSolicitacoes", fields: [construtoraId], references: [id])
  corretor          User?                       @relation("CorretorSolicitacoes", fields: [corretorId], references: [id])
  empreendimento    Empreendimento?             @relation("EmpreendimentoSolicitacoes", fields: [empreendimentoId], references: [id])
  financeiro        Financeiro?                 @relation("FinanceiraSolicitacoes", fields: [financeiroId], references: [id])
  relacionamentos   SolicitacaoRelacionamento[]
  tags              Tag[]
  chamados          Chamado[]

  @@index([email], map: "idx_solicitacao_email")
}

model User {
  id                        Int                  @id @unique @default(autoincrement())
  username                  String               @unique @db.VarChar(50)
  password                  String               @db.VarChar(255)
  password_key              String               @db.VarChar(100)
  telefone                  String?              @db.VarChar(15)
  email                     String?              @unique @db.VarChar(100)
  cpf                       String?              @db.VarChar(14)
  nome                      String?              @db.VarChar(255)
  cargo                     String?              @db.VarChar(100)
  hierarquia                String?              @db.VarChar(100)
  reset_password            Boolean?             @default(true)
  status                    Boolean?             @default(false)
  sms_relat                 Boolean?             @default(false)
  termos                    Boolean?             @default(false)
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime?            @updatedAt
  alerts                    Alert[]
  chamados                  Chamado[]
  responsavelConstrutora    Construtora[]        @relation("ConstrutoraResponsavel")
  responsavelEmpreendimento Empreendimento[]     @relation("EmpreendimentoResponsavel")
  responsavelFinanceiro     Financeiro[]         @relation("FinanceiraResponsavel")
  solicitacoes              Solicitacao[]        @relation("CorretorSolicitacoes")
  construtoras              UserConstrutora[]
  empreendimentos           UserEmpreendimento[]
  financeiros               UserFinanceiro[]
  respostas                 Chamado[]            @relation("ChamadoRespostas")

  @@index([username], map: "idx_user_username")
  @@index([email], map: "idx_user_email")
  @@index([cpf], map: "idx_user_cpf")
}

model Construtora {
  id              Int                     @id @unique @default(autoincrement())
  cnpj            String                  @unique @db.VarChar(18)
  razaosocial     String                  @db.VarChar(255)
  fantasia        String?                 @db.VarChar(255)
  tel             String?                 @db.VarChar(15)
  email           String?                 @db.VarChar(100)
  obs             String?
  status          Boolean                 @default(true)
  valor_cert      Decimal?                @db.Decimal(10, 2)
  responsavelId   Int?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime?               @updatedAt
  financeiros     FinanceiroConstrutora[]
  responsavel     User?                   @relation("ConstrutoraResponsavel", fields: [responsavelId], references: [id])
  empreendimentos Empreendimento[]
  solicitacoes    Solicitacao[]           @relation("ConstrutoraSolicitacoes")
  colaboradores   UserConstrutora[]

  @@index([cnpj], map: "idx_construtora_cnpj")
  @@index([razaosocial], map: "idx_construtora_razaosocial")
}

model Financeiro {
  id             Int                        @id @unique @default(autoincrement())
  cnpj           String                     @unique @db.VarChar(18)
  razaosocial    String                     @db.VarChar(255)
  fantasia       String?                    @db.VarChar(255)
  tel            String?                    @db.VarChar(15)
  email          String?                    @db.VarChar(100)
  obs            String?
  responsavelId  Int?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime?                  @updatedAt
  construtoras   FinanceiroConstrutora[]
  empreendimento FinanceiroEmpreendimento[]
  responsavel    User?                      @relation("FinanceiraResponsavel", fields: [responsavelId], references: [id])
  solicitacoes   Solicitacao[]              @relation("FinanceiraSolicitacoes")
  colaboradores  UserFinanceiro[]

  @@index([cnpj], map: "idx_financeiro_cnpj")
  @@index([razaosocial], map: "idx_financeiro_razaosocial")
}

model Empreendimento {
  id            Int                        @id @unique @default(autoincrement())
  nome          String                     @db.VarChar(255)
  descricao     String?
  endereco      String?                    @db.VarChar(255)
  cidade        String?                    @db.VarChar(100)
  estado        String?                    @db.VarChar(2)
  cep           String?                    @db.VarChar(10)
  obs           String?
  status        Boolean                    @default(true)
  tag           String?                    @db.VarChar(50)
  construtoraId Int?
  responsavelId Int?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime?                  @updatedAt
  alerts        Alert[]
  construtora   Construtora?               @relation(fields: [construtoraId], references: [id])
  responsavel   User?                      @relation("EmpreendimentoResponsavel", fields: [responsavelId], references: [id])
  financeiros   FinanceiroEmpreendimento[]
  Solicitacao   Solicitacao[]              @relation("EmpreendimentoSolicitacoes")
  colaboradores UserEmpreendimento[]

  @@index([nome], map: "idx_empreendimento_nome")
  @@index([cidade, estado], map: "idx_empreendimento_localizacao")
}

model Alert {
  id                 Int             @id @unique @default(autoincrement())
  titulo             String?
  texto              String?
  solicitacao_id     Int?
  corretor           Int?
  tipo               String?
  tag                String?
  empreendimento     Int?
  status             Boolean?        @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime?       @updatedAt
  corretorData       User?           @relation(fields: [corretor], references: [id], onUpdate: SetNull)
  empreendimentoData Empreendimento? @relation(fields: [empreendimento], references: [id], onDelete: NoAction, onUpdate: SetNull)
  solicitacao        Solicitacao?    @relation(fields: [solicitacao_id], references: [id], onUpdate: SetNull)
}

model Suporte {
  id          Int       @id @unique @default(autoincrement())
  tag         String
  descricao   String?
  solicitacao Int?
  urlveiw     Json[]
  imgSuspensa String?
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Tag {
  id              Int          @id @default(autoincrement())
  solicitacao     Int?
  descricao       String?
  createAt        DateTime     @default(now())
  solicitacaoData Solicitacao? @relation(fields: [solicitacao], references: [id], onDelete: NoAction, onUpdate: SetNull)
}

model Chamado {
  id              Int          @id @unique @default(autoincrement())
  descricao       String?
  status          Int?
  images          Json[]
  images_adm      Json[]
  idUser          Int?
  idResposta      Int?
  resposta        String?
  createAt        DateTime     @default(now())
  updatedAt       DateTime?    @updatedAt
  respostaData    User?        @relation("ChamadoRespostas", fields: [idResposta], references: [id], onDelete: NoAction, onUpdate: SetNull)
  User            User?        @relation(fields: [idUser], references: [id], onDelete: NoAction, onUpdate: SetNull)
  solicitacaoId   Int?
  solicitacaoData Solicitacao? @relation(fields: [solicitacaoId], references: [id], onDelete: NoAction, onUpdate: SetNull)
}

model relatorio_financeiro {
  id          Int       @id @unique @default(autoincrement())
  protocolo   String?   @unique
  situacao_pg Int       @default(0)
  nota_fiscal String?
  solicitacao String
  construtora Int?
  start       DateTime?
  end         DateTime?
  statusNota  Boolean?  @default(false)
  createAt    DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model UserEmpreendimento {
  userId           Int
  empreendimentoId Int
  empreendimento   Empreendimento @relation(fields: [empreendimentoId], references: [id], onDelete: Cascade)
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, empreendimentoId])
}

model UserConstrutora {
  userId        Int
  construtoraId Int
  construtora   Construtora @relation(fields: [construtoraId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, construtoraId])
}

model UserFinanceiro {
  userId       Int
  financeiroId Int
  financeiro   Financeiro @relation(fields: [financeiroId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, financeiroId])
}

model FinanceiroEmpreendimento {
  financeiroId     Int
  empreendimentoId Int
  empreendimento   Empreendimento @relation(fields: [empreendimentoId], references: [id], onDelete: Cascade)
  financeiro       Financeiro     @relation(fields: [financeiroId], references: [id], onDelete: Cascade)

  @@id([empreendimentoId, financeiroId])
}

model FinanceiroConstrutora {
  construtoraId Int
  financeiroId  Int
  construtora   Construtora @relation(fields: [construtoraId], references: [id])
  financeiro    Financeiro  @relation(fields: [financeiroId], references: [id])

  @@id([construtoraId, financeiroId]) // Relacionamento muitos para muitos
}

model SolicitacaoRelacionamento {
  solicitacaoId Int
  relacionadaId Int
  solicitacao   Solicitacao @relation(fields: [relacionadaId], references: [id], onDelete: Cascade)

  @@id([solicitacaoId, relacionadaId])
}

model Logs {
  id        Int         @id @unique @default(autoincrement())
  User      Int
  EffectId  Int
  descricao String
  createAt  DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  rota      String
  Effects   Solicitacao @relation(fields: [EffectId], references: [id], onDelete: Cascade)


  @@unique([User, EffectId])
}

model Termo {
  id        Int       @id @unique @default(autoincrement())
  termo     String
  politica  String
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt

}

model Bug {
  id        Int       @id @unique @default(autoincrement())
  descricao String
  status    Boolean   @default(true)
  createAt  DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}